#include <stdlib.h> 
#include <iostream>
#include "node.h"
template <class T>
class double_linked_list{
	private:
		node<T> * head;
		node<T> * tail;
		node<T> * current;
		int size, used;
		bool hasnext;

	public:
		double_linked_list(T);
		void push(T);
		T pop();
		int getSize();
		T getElem(int);
		node<T>* getnode(int);
		void goLeft();
		void goRight();
		node<T>* getMid();
		T getCurrent();
		void print();
		bool hasNext();
		node<T>* getHead();
		node<T>* getTail();
		void printtofile(string);
};
template <class T>
node<T>* double_linked_list<T>::getnode(int index){
	int i = 0;
	node<T> * temp = head;
	while(i != index){
		i++;
		temp = temp->getNext();
	}
	return temp;

};
template <class T>
double_linked_list<T>::double_linked_list(T num){
	node<T> * temp = new node<T>(num);
	head = temp;
	tail = temp;
	size = 1;
	used= 0;
	current = head;
	hasnext = false;
};
template <class T>
void double_linked_list<T>::push(T num){
	node<T> * temp = new node<T>(num);
	tail->setNext(temp);
	temp->setPrev(tail);
	tail = temp;
	size++;
	hasnext = true;
};
template <class T>
T double_linked_list<T>::pop(){
	T value = tail->getVal();
	node<T>* temp = tail;
	tail = tail->getPrev();
	delete temp;
	size--;
	return value;
};
template <class T>
int double_linked_list<T>::getSize(){
	return size;
};
template <class T>
T double_linked_list<T>::getElem(int index){
	if (index > size){
		exit( EXIT_FAILURE);
	}
	else if(index == 0){
		return head->getVal();
	}
	else if(index == size-1){
		return tail->getVal();
	}
	else{
		node<T> * temp = head;
		for(int i =0; i < index; i++){
			temp = temp->getNext();
		}
		return temp->getVal();
	}
};
template <class T>
void double_linked_list<T>::goLeft(){
	current = current->getPrev();
};
template <class T>
void double_linked_list<T>::goRight(){
	current = current->getNext();
	used = used +1;
}
template <class T>
T double_linked_list<T>::getCurrent(){
	return current->getVal();
};

template <class T>
node<T>* double_linked_list<T>::getMid(){
	using namespace std;
	node<T> * temp = head;
	int half = size/2;
	for(int i = 0; i < size-1; i++){
		temp = temp->getNext();
		if(i == half){
			return temp;
		}
	}
};
template <class T>
void double_linked_list<T>::print(){
	using namespace std;
	for(int i =0; i <size; i++){
		cout<<getElem(i)<<endl;
	}
};
template <class T>
void double_linked_list<T>::printtofile(string filename){
	using namespace std;
	ofstream file;
	filename = "sorted _"+filename;
	file.open(filename);
	for(int i = 0; i<size; i++){
		file<<getElem(i)<<"\n";
	}
};

template <class T>
node<T>* double_linked_list<T>::getHead(){
	return head;
};
template <class T>
node<T> * double_linked_list<T>::getTail(){
	return tail;
};
template <class T>
bool double_linked_list<T>::hasNext(){
	using namespace std;
	if(used != size){
		return true;
	}
	return false;
};
